Similarities Between Lists and NumPy Arrays:
1. Both are used for storing data.
2. Both are mutable.
3. Both can be indexed and iterrated through.
4. Both can be sliced. Slicing Operation is possible.


DIFFERENCES Between Lists and NumPy Arrays:
1. List can be used to store different datatypes, Arrays store same datatypes.
2. Do operations on Array but not on list. Like we can divide the array not the list.
3.To use Array we need to import Numpy libraries but List is Built-in, we do not need to install anything externally.

ADVANTAGES OF ARRAY OVER LISTS:
1. Consumes less memory
2.Fast.
3. Convenient to use when we do mathematical operations.


ARRAYS:

There are different functions to create NumPy Arrays:
1. Array()
2. Arrange()
3. Zeros()
4. Ones()
5. Linspace()
6. Eye()
7. Random()



1. Array(): Very similar to Mathematical Array. Refer to the Jupyter Notebook.

2. Arrange(): This is Array Range. This function returns evenly spaced  numeric values within an interval stored as NumPY array.
For syntax and example refer to the Jupyter Notebbok.


3. Zeros(): Creates  Array filled with zero. For syntax and example refer to the Jupyter Notebbok.

4. Ones(): Creates  Array filled with zero.

5. Linspace(): Creates sequence of evenly spaced values within a defined interval. It also gives values in the specified range. 
And the values are evenly spaces like the arrange function. For syntax and example refer to the Jupyter Notebbok.

6. Eye(): Returns the array where all the values is equal to 0,except fot the k-th diagonal,whose values are equal to 1. We can chose which diagonal can contain the vaue 1.
For syntax and example refer to the Jupyter Notebbok.


7. Random(): This function is used to create arrays with random function. In Random module there are other functions also like:
a) rand()
b) randn()
c) randf()
d) randint()


ATTRIBUTES OF ARRAYS:

1. DIMENSIONS: To find the dimension of array use the attribute "ndim".For syntax and example refer to the Jupyter Notebbok.
2. SHAPE: It is the number of integers showing the number of elements stored in each dimension of array.For syntax and example refer to the Jupyter Notebbok.
3. SIZE: The total number of elements in the Array. This is the product of elements of array shape.For syntax and example refer to the Jupyter Notebbok.
4. Dtype: Datatype. Describes the data type of the array.
5. itemsize: This is the size in byte of each element of the array. Size of each item of Array in byte.For syntax and example refer to the Jupyter Notebbok.


Datatype in NumPy Library.
1. Boolean
2. Integer
3. Unsigned integer
4. Float
5. Complex


SLICING AND INDEXING OPERATION:
To get the subset of Array or the sub array then indexing and slicing operation is required. 

INDEXING:
Similar to list we can access the elements of array using indexing. It follows a zero-based indexing.
Negative indexing can also be applied.
To retrive a single value we need indexing. To retrive a multiple value (collection of values) we need slicing.
indexing: a[2]
slicing: a[1:5]

Both Slicing and indexing are parts of Basic Indexing.

In Advanced indexing we can access elements of an array arbitarily permitting items to be accessed out of order and even repeatedly.

Basic indexing: a[index] ,  Slicing : a[start:stop:step].

Advance indexing returns the copy of the data and here we can use Ndarray.
there are 2 types, a) INTEGER INDEXING ,  b) ADVANCE INDEXING.

ARITHEMETIC OPERATION IN NUMPY ARRAYS.
This can be done in 2 ways:

1. Using Scalas
2. Between Arrays.
Functions related to the arithemetic operations:

a+b:  numpy.add(a,b)
a-b:  numpy.substract(a,b)
a*b:  numpy.multiply(a,b)
a/b:  numpy.divide(a,b)
a%b:  numpy.mod(a,b)
a**b: numpy.power(a,b)
